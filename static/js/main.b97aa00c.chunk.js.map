{"version":3,"sources":["svgs/deadlyfingers.svg","generated/index.ts","components/Nav/index.ts","components/Nav/Nav.tsx","components/Slideshow/index.ts","components/Slideshow/Slideshow.tsx","components/Page/index.ts","components/Page/Page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","imageCatagories","require","Nav","props","useState","isActive","setIsActive","keys","Object","imageCategories","labels","map","key","substring","indexOf","replace","active","selectedIndex","className","data-menu","window","navigator","msMaxTouchPoints","onClick","type","src","Deadlyfingers","alt","onMouseEnter","i","value","e","selected","parseInt","target","Slideshow","id","images","length","image","style","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","width","height","position","top","left","bullets","fillParent","animation","data-src","Page","defaultCategory","index","setIndex","setImages","newIndex","categoryKey","find","startsWith","getImages","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b97aa00c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deadlyfingers.4f662e4d.svg\";","/* eslint-disable @typescript-eslint/no-var-requires */\nconst imageCatagories: { [key: string]: string[] } = require('./imageCategories.json')\n\nexport default imageCatagories\n","import Nav from './Nav'\n\nexport default Nav\n","import React, { useState } from 'react'\nimport './Nav.scss'\nimport Deadlyfingers from '../../svgs/deadlyfingers.svg'\nimport imageCategories from '../../generated'\n\ninterface NavProps {\n  selected: (index: number) => void\n  selectedIndex: number\n}\n\nconst Nav: React.FunctionComponent<NavProps> = (props: NavProps) => {\n  const [isActive, setIsActive] = useState(false)\n  const keys = Object.keys(imageCategories)\n  // Format folder name into category label\n  const labels = keys.map(key =>\n    key\n      .substring(key.indexOf('-') + 1)\n      .replace(/-/g, ' ')\n      .replace(/\\sand\\s/gi, ' & '),\n  )\n  const active = isActive ? 'active' : ''\n  const isTouch = (): boolean => 'ontouchstart' in window || navigator.msMaxTouchPoints > 0\n  const { selectedIndex } = props\n  return (\n    <nav className=\"Nav\">\n      <div data-menu=\"main\" className={active}>\n        {isTouch() ? (\n          <button onClick={(): void => setIsActive(!active)} type=\"button\">\n            <img src={Deadlyfingers} className=\"icon\" alt=\"Design\" />\n          </button>\n        ) : (\n          <button onClick={(): void => setIsActive(!active)} onMouseEnter={(): void | null => setIsActive(true)} type=\"button\">\n            <img src={Deadlyfingers} className=\"icon\" alt=\"Design\" />\n          </button>\n        )}\n        <ul>\n          {keys.map((key, i) => (\n            <li key={key}>\n              <button\n                className={i === selectedIndex ? \"selected\" : \"\"}\n                value={i}\n                onClick={(e): void => {\n                  setIsActive(false)\n                  props.selected(parseInt((e.target as HTMLButtonElement).value, 10))\n                }}\n                type=\"button\"\n              >\n                <h3>{labels[i]}</h3>\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n      {isActive ? (\n        <button className=\"overlay\" onClick={(): void => setIsActive(false)} type=\"button\">\n          <span>Close</span>\n        </button>\n      ) : null}\n    </nav>\n  )\n}\n\nexport default Nav\n","import Slideshow from './Slideshow'\n\nexport default Slideshow\n","import React, { CSSProperties } from 'react'\nimport AwesomeSlider from 'react-awesome-slider'\nimport 'react-awesome-slider/dist/styles.css'\nimport 'react-awesome-slider/dist/custom-animations/scale-out-animation.css'\n// import 'react-awesome-slider/dist/custom-animations/cube-animation.css'\n// import 'react-awesome-slider/dist/custom-animations/fall-animation.css'\n// import 'react-awesome-slider/dist/custom-animations/open-animation.css'\n// import 'react-awesome-slider/dist/custom-animations/fold-out-animation.css'\nimport './Slideshow.scss'\n\ninterface SlideshowProps {\n  id: number\n  images: string[]\n}\n\nconst Slideshow: React.FunctionComponent<SlideshowProps> = (props: SlideshowProps) => {\n  const { id, images } = props\n  // single image\n  if (images.length === 1) {\n    const image = images[0]\n    const style: CSSProperties = {\n      backgroundImage: `url('${image}')`,\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: '50% 50%',\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n    }\n    return <div key={id} style={style} className=\"Slideshow\" />\n  }\n  // multiple images\n  return (\n    <div className=\"Slideshow\">\n      <AwesomeSlider key={id} bullets={false} fillParent animation=\"scaleOutAnimation\">\n        {images.map(image => (\n          <div key={image} data-src={image} />\n        ))}\n      </AwesomeSlider>\n    </div>\n  )\n}\n\nexport default Slideshow\n","import Page from './Page'\n\nexport default Page\n","import React, { useState } from 'react'\nimport './Page.scss'\nimport imageCategories from '../../generated'\nimport Nav from '../Nav'\nimport Slideshow from '../Slideshow'\n\nconst Page: React.FunctionComponent = () => {\n  const defaultCategory = imageCategories[Object.keys(imageCategories)[0]]\n\n  const [index, setIndex] = useState(0)\n  const [images, setImages] = useState(defaultCategory)\n\n  const getImages = (newIndex: number): string[] => {\n    const id = newIndex + 1\n    const categoryKey = Object.keys(imageCategories).find(key => key.startsWith(`${id}`))\n    if (categoryKey) {\n      return imageCategories[categoryKey]\n    }\n    return defaultCategory\n  }\n\n  const selected = (newIndex: number): void => {\n    setIndex(newIndex)\n    setImages(getImages(newIndex))\n  }\n\n  return (\n    <div className=\"Page\">\n      <Nav selected={selected} selectedIndex={index || 0} />\n      <Slideshow id={index} images={images} />\n    </div>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport './App.scss'\nimport Page from './components/Page'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}